import AsyncStream from './AsyncStream';
import { Collector, Entry, collect } from './Collectors';
import {
  alwaysTrue,
  BinaryOperator,
  Comparator,
  compareNumbers,
  Consumer,
  identity,
  Mapper,
  Predicate,
  reversed,
  Supplier,
  UnaryOperator,
} from './functions';
import {
  Iterable,
  ArrayIterable,
  FilteringIterable,
  MappingIterable,
  SupplyingIterable,
  LimitingIterable,
  FlatteningIterable,
  RangeIterable,
  TakeWhileIterable,
  DropWhileIterable,
  TransformingIterator,
} from './Iterables';
import Optional from './Optional';
import Transformers, { Transformer } from './Transformers';

export type Indexed<T> = { index: number; value: T };

/**
 * Contains factory methods to create Streams. Also models the general stream, which
 * wraps an iterator over some source.
 */
export default class Stream<T> {
  /**
   * Convert an array to a stream
   * @param array the array to stream
   */
  public static ofArray<T>(array: ReadonlyArray<T>): Stream<T> {
    return new Stream<T>(new ArrayIterable<T>(array));
  }

  /**
   * Convert individual elements to a stream
   * @param elements the elements to stream
   */
  public static of<T>(...elements: T[]): Stream<T> {
    return Stream.ofArray(elements);
  }

  /**
   * Convert an object into a stream of entries
   * @param object the object to read
   * @returns a stream of {@link Entry} objects
   */
  public static ofObject<V>(object: Record<string, V>) {
    return Stream.ofArray(Object.entries(object)).map(([key, value]) => ({
      key,
      value,
    }));
  }

  /**
   * Convert a map into a stream of entries
   * @param map the map to read
   * @returns a stream of {@link Entry} objects
   */
  public static ofMap<K, V>(map: Map<K, V>): Stream<Entry<K, V>> {
    const iterator = map.entries();

    return Stream.generateFinite(() =>
      Optional.of(iterator.next().value).map(([key, value]) => ({
        key,
        value,
      }))
    );
  }

  /**
   * Create a number stream with elements
   * @param elements the elements of the stream
   * @returns a number stream which has special numeric processing
   */
  public static ofNumbers(...elements: number[]): NumberStream {
    return new NumberStream(new ArrayIterable(elements));
  }

  /**
   * Create a number stream with elements
   * @param elements the elements of the stream as an array
   * @returns a number stream which has special numeric processing
   */
  public static ofNumericArray(elements: number[]): NumberStream {
    return new NumberStream(new ArrayIterable(elements));
  }

  /**
   * Create a number stream based on a numeric range that steps up by one each time
   * @param min the first number in the range
   * @param maxExclusive the number after the last in the range
   * @returns a number stream which has special numeric processing
   */
  public static ofRange(min: number, maxExclusive: number, delta?: number) {
    return new NumberStream(new RangeIterable(min, maxExclusive, delta));
  }

  /**
   * Create a number stream based on a numeric range that steps up by one each time
   * @param min the first number in the range
   * @param maxInclusive the last in the range
   * @returns a number stream which has special numeric processing
   */
  public static ofRangeClosed(
    min: number,
    maxInclusive: number,
    delta?: number
  ) {
    return new NumberStream(
      new RangeIterable(min, maxInclusive + (delta ?? 1), delta)
    );
  }

  /**
   * Produce a single stream made of multiple substreams, all the elements will be
   * sequenced out of each substream
   * @param streams the streams to add together
   * @returns a single stream formed of the sub streams
   */
  public static concat<T>(...streams: Stream<T>[]) {
    return Stream.of(...streams).flatMap(identity);
  }

  /**
   * Creates a stream from a generator
   * @param generator the function to supply the next value
   * @returns an infinite stream generated by the function
   */
  public static generate<T>(generator: Supplier<T>): Stream<T> {
    return new Stream<T>(new SupplyingIterable<T>(generator));
  }

  /**
   * Generate using a single method which returns optional values for which optional empty means stop
   * @param generator generate using a generator which returns optional values, for which empty means stop
   * @returns a stream of the values from within the optional
   */
  public static generateFinite<T>(generator: Supplier<Optional<T>>): Stream<T> {
    return Stream.generate(generator)
      .takeWhile((optional) => optional.isPresent())
      .map((optional) => optional.orElseThrow());
  }

  /**
   * Generate a stream by iterating over a function
   * @param seed the first value of the stream
   * @param next the function that produces value n, by transforming value n - 1
   * @param hasNext the function that determines whether the stream continues - this is applied to each element,
   * including the seed, when it's generated
   */
  public static iterate<T>(
    seed: T,
    next: UnaryOperator<T>,
    hasNext: Predicate<T> = alwaysTrue
  ): Stream<T> {
    // compose the iterator as a generator with a takeWhile
    let current = seed;
    return this.generate(() => {
      const value = current;
      current = next(value);
      return value;
    }).takeWhile(hasNext);
  }

  /**
   * Create an empty stream
   * @returns an empty stream
   */
  public static empty<T>() {
    return Stream.of<T>();
  }

  private iterable: Iterable<T>;
  private hasTerminated = false;

  /**
   * Construct from an iterable
   * @param iterable the iterable with the contents
   */
  constructor(iterable: Iterable<T>) {
    this.iterable = iterable;
  }

  private terminal<R>(operation: Supplier<R>): R {
    if (this.hasTerminated) {
      throw new Error('Cannot reuse a terminated stream');
    }
    this.hasTerminated = true;
    return operation();
  }

  /**
   * Convert the stream into an array (terminal operation)
   */
  public toArray(): T[] {
    return this.terminal(() => {
      const array: T[] = [];
      while (this.iterable.hasNext()) {
        array.push(this.iterable.getNext());
      }
      return array;
    });
  }

  /**
   * Convert the stream into an array (terminal operation)
   */
  public toMap<K, V>(
    keyMapper: Mapper<T, K>,
    valueMapper: Mapper<T, V>
  ): Map<K, V> {
    return this.terminal(() => {
      const map = new Map<K, V>();
      while (this.iterable.hasNext()) {
        const item = this.iterable.getNext();
        map.set(keyMapper(item), valueMapper(item));
      }
      return map;
    });
  }

  /**
   * Convert the stream into a stream of something else
   * @param mapper the mapping function
   */
  public map<R>(mapper: Mapper<T, R>): Stream<R> {
    return new Stream<R>(new MappingIterable(this.iterable, mapper));
  }

  /**
   * Add an index value to the stream so it's `{index, value}` with a 0-based
   * index. Note: the indexing starts at this point in the chain of filters etc.
   * @returns a stream of items with the index added
   */
  public indexed(): Stream<Indexed<T>> {
    let index = 0;
    return this.map((value) => ({ index: index++, value }));
  }

  /**
   * Convert the stream into a stream of numberes
   * @param mapper the mapping function from this element to numbers
   */
  public mapToNumber(mapper: Mapper<T, number>): NumberStream {
    return new NumberStream(new MappingIterable(this.iterable, mapper));
  }

  /**
   * Convert each item of the stream into a streamable and join them
   * @param mapper maps each element to a new stream
   * @returns the stream of all the items as though a single stream
   */
  public flatMap<R>(mapper: Mapper<T, Stream<R> | R[]>): Stream<R> {
    return new Stream<R>(
      new FlatteningIterable(
        new MappingIterable(this.iterable, (item) => {
          const mapped = mapper(item);
          if (mapped instanceof Array) {
            return new ArrayIterable(mapped);
          }
          return mapped.getIterable();
        })
      )
    );
  }

  /**
   * Filter the stream
   * @param predicate allows the items to pass through to target stream
   */
  public filter(predicate: Predicate<T>) {
    return this.substituteIterable(
      new FilteringIterable(this.iterable, predicate)
    );
  }

  /**
   * Similar to filtering, this requires a filter to pass to return items, but
   * it stops the stream the moment the filter fails
   * @param predicate the condition to pass
   * @returns a stream which only takes while the filter is matched
   */
  public takeWhile(predicate: Predicate<T>) {
    return this.substituteIterable(
      new TakeWhileIterable(this.iterable, predicate)
    );
  }

  /**
   * Similar to filtering and skip, this removes elements which match a filter
   * it stops the stream the moment the filter fails
   * @param predicate the condition to pass
   * @returns a stream which only takes while the filter is matched
   */
  public dropWhile(predicate: Predicate<T>) {
    return this.substituteIterable(
      new DropWhileIterable(this.iterable, predicate)
    );
  }

  /**
   * Transform from this stream into another
   * @param transformer the transformer to use
   */
  public transform<A, R>(transformer: Transformer<T, A, R>): Stream<R> {
    return new Stream<R>(
      new TransformingIterator<T, A, R>(this.getIterable(), transformer)
    );
  }

  /**
   * Add a limit to the result
   * @param max the maximum number of items
   * @returns a new stream which won't go past the max
   */
  public limit(max: number) {
    return this.substituteIterable(new LimitingIterable<T>(max, this.iterable));
  }

  private substituteIterable(newIterable: Iterable<T>) {
    this.iterable = newIterable;
    return this;
  }

  /**
   * Get the first item from the stream (terminal operation)
   * @param predicate optional filter to apply with find first
   */
  public findFirst(predicate?: Predicate<T>): Optional<T> {
    if (predicate) {
      return this.filter(predicate).findFirst();
    }

    return this.terminal(() => {
      if (this.iterable.hasNext()) {
        return Optional.of(this.iterable.getNext());
      }
      return Optional.empty();
    });
  }

  /**
   * Exit hatch the iterable we're working on behind the scenes (terminal operation)
   * @returns the iterable behind this stream
   */
  public getIterable(): Iterable<T> {
    return this.terminal(() => this.iterable);
  }

  /**
   * Convert to an async stream
   * @returns an async stream with these elements in
   */
  public async(): AsyncStream<T> {
    return AsyncStream.ofStream(this);
  }

  /**
   * Does anything in the stream match the predicate? (terminal operation)
   * @param predicate the test
   * @returns true if anything matches
   */
  public anyMatch(predicate: Predicate<T>) {
    return this.terminal(() => {
      while (this.iterable.hasNext()) {
        if (predicate(this.iterable.getNext())) {
          return true;
        }
      }
      return false;
    });
  }

  /**
   * Does anything in the stream match the predicate? (terminal operation)
   * @param predicate the test
   * @returns true if nothing matches
   */
  public noneMatch(predicate: Predicate<T>) {
    return this.terminal(() => {
      while (this.iterable.hasNext()) {
        if (predicate(this.iterable.getNext())) {
          return false;
        }
      }
      return true;
    });
  }

  /**
   * Do all of the items match the predicate (true if there are no items in the stream - terminal operation)
   * @param predicate the predicate to test
   * @returns true if all match
   */
  public allMatch(predicate: Predicate<T>) {
    return this.terminal(() => {
      while (this.iterable.hasNext()) {
        if (!predicate(this.iterable.getNext())) {
          return false;
        }
      }
      return true;
    });
  }

  /**
   * Perform an item on each one (terminal operation)
   * @param consumer the action to perform on each
   */
  public forEach(consumer: Consumer<T>) {
    return this.terminal(() => {
      while (this.iterable.hasNext()) {
        consumer(this.iterable.getNext());
      }
    });
  }

  /**
   * Peek at items as they pass through the stream
   * @param consumer is allowed to look at an item passing through the stream
   */
  public peek(consumer: Consumer<T>): Stream<T> {
    return this.filter((item) => {
      consumer(item);
      return true;
    });
  }

  /**
   * Turn this into a distinct stream
   */
  public distinct() {
    return this.substituteIterable(
      new TransformingIterator<T, Set<T>, T>(
        this.iterable,
        Transformers.distinct()
      )
    );
  }

  /**
   * Find the maximum element if there is one (terminal operation)
   * @param compareFn the comparator for min/max
   * @returns the max or optional empty if the stream is empty
   */
  public max(compareFn: Comparator<T>): Optional<T> {
    return this.min(reversed(compareFn));
  }

  /**
   * Find the minimum element if there is one (terminal operation)
   * @param compareFn the comparator for min/max
   * @returns the min or optional empty if the stream is empty
   */
  public min(compareFn: Comparator<T>): Optional<T> {
    return this.terminal(() => {
      let min: T | undefined = undefined;
      while (this.iterable.hasNext()) {
        if (typeof min === 'undefined') {
          min = this.iterable.getNext();
        } else {
          const next = this.iterable.getNext();
          if (compareFn(min, next) > 0) {
            min = next;
          }
        }
      }
      return Optional.of(min);
    });
  }

  /**
   * Turn this into a sorted stream
   */
  public sorted(compareFn?: Comparator<T>): Stream<T> {
    return Stream.ofArray(this.toArray().sort(compareFn));
  }

  /**
   * Count the elements (terminal operation)
   */
  public count() {
    return this.terminal(() => {
      let i = 0;
      while (this.iterable.hasNext()) {
        this.iterable.getNext();
        i++;
      }
      return i;
    });
  }

  /**
   * Skip some elements
   * @param howMany the number to skip
   */
  public skip(howMany: number) {
    for (let i = 0; i < howMany && this.iterable.hasNext(); i++) {
      this.iterable.getNext();
    }
    return this;
  }

  /**
   * Reduce the stream to a single value (terminal operation)
   * @param accumulator the operator for combining the amassed result
   * @returns the first element if there's one, the accumulated result if more, or empty
   */
  public reduce(accumulator: BinaryOperator<T>): Optional<T> {
    return this.terminal(() => {
      let resultSoFar = Optional.empty<T>();
      while (this.iterable.hasNext()) {
        const next = this.iterable.getNext();
        if (resultSoFar.isEmpty()) {
          resultSoFar = Optional.of(next);
        } else {
          resultSoFar = resultSoFar.map((item) => accumulator(item, next));
        }
      }
      return resultSoFar;
    });
  }

  /**
   * Reduce the stream to a single value of possibly a different type to the stream (terminal operation)
   * @param initialValue the initial value to reduce from
   * @param accumulator the operator for combining the amassed result
   * @param converter an optional converter, when we're not using the type from this stream to convert from element type
   * to the reduction type
   * @returns the first element if there's one, the accumulated result if more, or empty
   */
  public reduceFrom<U>(
    initialValue: U,
    accumulator: BinaryOperator<U>,
    converter: Mapper<T, U>
  ): U {
    return this.terminal(() => {
      let resultSoFar = initialValue;
      while (this.iterable.hasNext()) {
        const next = this.iterable.getNext();
        resultSoFar = accumulator(resultSoFar, converter(next));
      }
      return resultSoFar;
    });
  }

  /**
   * Join the elements of the stream together into a string
   * @param delimiter the delimiter to join with, defaults to empty string
   * @returns a joined version of the stream
   */
  public join(delimiter = ''): string {
    return this.map((element) => `${element}`)
      .reduce((a, b) => `${a}${delimiter}${b}`)
      .orElse('');
  }

  /**
   * Collect with a collector
   * @param collector the collector to use - see {@link Collectors}
   * @returns the result of collecting
   */
  public collect<A, R>(collector: Collector<T, A, R>): R {
    return collect(this.getIterable(), collector);
  }
}

/**
 * Specialist stream for numbers
 */
export class NumberStream extends Stream<number> {
  /**
   * Get the sum
   * @returns the sum of all the values in the stream
   */
  public sum(): number {
    return this.reduce((a, b) => a + b).orElse(0);
  }

  public sorted(
    compareFn: Comparator<number> = compareNumbers
  ): Stream<number> {
    return super.sorted(compareFn);
  }

  /**
   * Get max number (terminal operation)
   * @param compareFn a custom comparator, or can default to compareNumbers
   * @returns the max
   */
  public max(compareFn: Comparator<number> = compareNumbers): Optional<number> {
    return super.max(compareFn);
  }

  /**
   * Get min number (terminal operation)
   * @param compareFn a custom comparator, or can default to compareNumbers
   * @returns the min
   */
  public min(compareFn: Comparator<number> = compareNumbers): Optional<number> {
    return super.min(compareFn);
  }
}
